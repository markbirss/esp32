#!/bin/ruby

# Tom Trebisky  5-12-2018

# Anyone who realizes what is being done here will be appalled.
# I am launching a process to run objdump for EACH and EVERY line
# that needs to be disassembled.  Too bad.
# If you don't like it, write your own disassembler !!  :-)
# This is a "get 'er done" approach and enabled me to get most
# of this written in an evening.
#
# It takes just under 20 seconds now, with two passes,
#  on my 3.5 Ghz x86_64 system,
# and anway, that computer has nothing better to do.

# I have discovered that rom1 follows after rom0 at
# addresses 0x40060000 to 0x4006ffff
# So we actually have 7 * 64k of ROM to deal with.
#    458752 bytes

# After chasing the thread of execution that begins at
# 0x40000400, we have disassembled 19234 bytes of 458752
# (approximately 4 percent!)

# TODO:
# 1 - find out why my "Twice" messages don't run in a continuous
#       flow thru areas where I am sure they must.  DONE
#  Things involving setting ruby subarrays that I still don't understand.
# 2 - deal with l32r nicely. DONE
# 3 - generate an output in proper order via pass2. DONE
# 4 - dump the "gaps" in some nice way.
# 5 - symbols from ld file
# 6 - strings
# 7 - add call table and generate "sub_xxx" sort of labels
#     for all call targets not in the ld file.
# 8 arrange for hints file

$bin_file = "esp32.bin"
$elf_file = "esp32.elf"

$rom_base = 0x40000000
$rom_size = 65536 * 7

$hintfile = "hints"

# Augment this with some convenience methods
class Integer
    def hex
	"%08x" % self
    end
    def xhex
	"0x%08x" % self
    end
end

def error ( a, s )
    puts "Trouble at " + a.xhex
    puts s
    exit
end


# Information for a single instruction
class Instr
    attr_reader :addr
    attr_reader :line
    attr_reader :size
    attr_reader :target
    attr_reader :is_branch
    attr_reader :is_call
    attr_reader :is_jump
    attr_reader :is_l32r
    attr_reader :is_term

    def initialize ( addr, stuff )
	@is_branch = false
	@is_call = false
	@is_jump = false
	@is_l32r = false
	@is_term = false
	@target = nil

	@addr = addr

	info = stuff.split "\n"
#	puts stuff
#	puts info.size
	line = nil
	match = Regexp.new "^" + addr.hex + ":"
	info.each { |l|
	    line = l if match =~ l
	}

	error addr, stuff unless line

	@line = line
	w = line.split
	if w.size < 3
	    error addr, stuff
	end
	@size = w[1].size / 2
	if @size < 1 or @size > 3
	    error addr, stuff
	end
	op = w[2]

	@is_term = true if op =~ /^ret/
	@is_term = true if op =~ /^j/
	@is_jump = true if op =~ /^j/
	@is_jump = false if op =~ /^jx/
	@is_branch = true if op =~ /^loopnez/
	@is_branch = true if op =~ /^b/
	@is_branch = false if op =~ /^break/
	@is_call = true if op =~ /^call/
	@is_call = false if op =~ /^callx/
	@is_l32r = true if op =~ /^l32r/

	if @is_jump
	    @target = w[-1]
	end
	if @is_call
	    @target = w[-1]
	end
	if @is_branch
	    @target = w[-1]
	end
	if @is_l32r
	    @target = w[-1]
	end
    end
end

# The purpose of this is to hide the map and the way we represent it
# We also hide indexing, all external access is via addresses
class Map
    def initialize ( base, size )
	@base = base
	@size = size
	@map = Array.new size, "X"
	if File.exist? $hintfile
	    f = File.open $hintfile
	    f.each { |l|
		puts "Hint: " + l
	    }
	    close f
	end
	# after Call to 0x40000704 we will never return from.
	# XXX belongs in hints file
	@map[0x55d] = "D"
    end
    def show_map
	addr = @base
	i = 0
	loop {
	    break unless @map[i]
	    print "MAP #{addr.hex}: "
	    16.times {
		print " " + @map[i] 
		i += 1
	    }
	    print "\n"
	    addr += 16
	}
    end
    def get_count
	rv = 0;
	@map.each { |m|
	    rv += 1 if m != "X"
	}
	rv
    end
    def claim ( index, size, type )
	size.times {
	    @map[index] = type
	    index += 1
	}
    end
    def claim_l32r ( addr )
	index = addr - @base
	claim index, 4, "L"
    end
    def claim_instr ( addr, size )
	index = addr - @base
	claim index, size, "I"
    end

    def is_avail ( addr )
	return @map[addr-@base] == "X"
    end
    # sort of hackish sloppy version of the above
    def is_ok ( addr )
	index = addr - @base
	return true if @map[index] == "X"
	return true if @map[index] == "I"
	return false
    end
    def is_instr ( addr )
	return @map[addr-@base] == "I"
    end
    def is_l32r ( addr )
	return @map[addr-@base] == "L"
    end

    # This is the heart of Pass 2
    # Use the map to delimit sections to
    # disassemble in different ways.
    # XXX - Does not hide codes
    def get_range ( addr )
	index = addr - @base
	if index >= @size
	    return "Q", 0
	end
	if @map[index] == "L"
	    return "L", addr + 4
	end
	t = @map[index]
	loop {
	    index = index + 1
	    break if index >= @size
	    break if @map[index] != t
	}
	return t, @base + index
    end
end

# We need this to fetch stuff for l32r cleanup
# also to dump binary stuff for short regions
class Image
    def initialize
	@base = $rom_base
	#@size = $rom_size

	file = File.open $bin_file, "rb"
	@im = file.read
	file.close
	if @im.size != $rom_size
	    puts "Something is wrong with binary file"
	    exit
	end
    end
    def fetch_long ( addr )
	index = addr - @base
	bytes = @im[index,4]
	vals = bytes.unpack "L"
	val = vals[0]
    end
    def fetch_hex ( addr, count )
	index = addr - @base
	bytes = @im[index,count]
	vals = bytes.unpack "C*"
	rv = ""
	vals.each { |v|
	    rv = rv + "%02x" % v
	}
	return rv
    end
end

class Dumper
    def initialize
	@elf = $elf_file
	@size = $rom_size
	@base = $rom_base

	@show_pass1 = false
	@debug_pass1 = false
	@debug_pass2 = false
	@limit = @base + @size -1

	# This should be on the search path, if not prefix
	# with something like /opt/esp32/xtensa-esp32-elf/bin
#	@cmd = "xtensa-lx106-elf-objdump -mxtensa -d -z"
	@cmd = "xtensa-esp32-elf-objdump -mxtensa -d -z"

	@cur_addr = Array.new
	@old_addr = Array.new

	@map = Map.new $rom_base, $rom_size
	@image = Image.new
    end
    def one_inst ( addr )
	eaddr = addr + 3
	range = "--start-address=#{addr.xhex} --stop-address=#{eaddr.xhex}"
	cmd = @cmd + " " + range + " #{@elf}"
	return Instr.new addr, `#{cmd}`	; note backticks here
    end
    def add_addr ( target )
	#puts "Check add: " + target
	error 0xdead, target if target !~ /^0x4/
	addr = target.hex
	#puts "Maybe add: " + addr.hex
	# Never see Wow, now that we have all 7 * 64k
	# but this is what tipped us off to the address map
	# in the reference manual being wrong.
	if addr > @limit
	    puts "Wow, skipping: " + addr.hex
	    return
	end
	return if @new_addr.include? addr
	return if @old_addr.include? addr
	puts "Add: " + addr.hex if @debug_pass1
	@new_addr << addr
    end

    def print_inst ( i )
	    if i.is_l32r
		val = @image.fetch_long ( i.target.hex )
		puts i.line + "\t; ( " + val.xhex + " )"
	    else
		puts i.line
	    end
    end

    def range1 ( addr )
	loop {
	    break unless @map.is_avail addr

	    i = one_inst addr

	    print_inst i if @show_pass1

	    if i.is_l32r
		@map.claim_l32r i.target.hex
	    end

	    # This indicates we have "slid" into a section we
	    # already disassembled, usually because we followed a
	    # branch prior to that section, so we can justend.
	    if @map.is_instr addr
		# puts "Twice visiting: " + addr.hex
		puts "*** END (Twice) ***" if @debug_pass1
		break
	    end

	    @map.claim_instr addr, i.size

	    add_addr i.target if i.is_jump
	    add_addr i.target if i.is_branch
	    add_addr i.target if i.is_call
	    addr += i.size
	    if i.is_term
		puts "*** END ***" if @debug_pass1
		break
	    end
	    i = nil	# help garbage collection ??
	}
    end
    def pass1 ( addr )
	@cur_addr << addr
	pass = 0
	loop {
	    pass += 1
	    break if @cur_addr.size < 1
	    puts "Starting pass for %d items" % @cur_addr.size if @debug_pass1
	    @new_addr = Array.new
	    loop {
		t = @cur_addr.shift
		break unless t
		@old_addr << t
		next unless @map.is_avail t
		puts "Chase: " + t.hex + " (#{@cur_addr.size})" if @debug_pass1
		range1 t
	    }
	    puts "!!! Pass #{pass} finished, %d waiting" % @new_addr.size if @debug_pass1

	    # We drop things that we saved as potential targets,
	    # but apparently continued on to disassemble
	    @new_addr.each { |n|
		unless @map.is_avail n
		    puts "Dropping: " + n.hex if @debug_pass1
		    next
		end
		@cur_addr << n
	    }
	}
    end


    # Just display, following a linear thread of execution
    # until it terminates.
    def range2 ( addr )
	loop {
	    # This test avoids runon disassembly that
	    # goes outside of regions already delimited
	    # in pass 1. Now sort of belt and suspenders,
	    # but we have seen it happen in cases where
	    # only a hint would set things right.
	    break unless @map.is_ok addr
	    i = one_inst addr
	    print_inst i
	    puts "" if i.is_term

	    addr += i.size
	    if i.is_term
		# puts "*** END2 ***"
		break
	    end
	    i = nil	# help garbage collection ??
	}
	return addr
    end
    def pass2
	addr = @base
	loop {
	    type, xaddr = @map.get_range addr
	    break if type == "Q"
	    
	    puts "Pass2 #{addr.hex} #{xaddr.hex} #{type}" if @debug_pass2

	    # Handle a l32r
	    if type == "L"
		hval = @image.fetch_long(addr).hex
		print "#{addr.hex}:	" + hval + "	; l32r\n"
	    elsif type == "I"
		loop {
		    naddr = range2 addr
		    puts "Range2 #{addr.hex} #{naddr.hex}" if @debug_pass2
		    break if naddr >= xaddr
		    puts "I ended prematurely: #{naddr.hex} #{xaddr.hex}" if @debug_pass2

		    addr = naddr
		}
	    else
		len = xaddr - addr;
		if ( len > 16 )
		    #eaddr = xaddr - 1
		    #print "#{addr.hex} to #{eaddr.hex}  --------- Unknown territory !!!\n"
		    eaddr = xaddr - 1 - @base
		    eaddr_hex = "%x" % eaddr
		    puts "#{addr.hex}:#{eaddr_hex}\t\t\tunknown\t; (not disassembled)"
		else
		    print "#{addr.hex}:\t"
		    print @image.fetch_hex addr, len
		    print "\n"
		end
	    end
	    addr = xaddr
	}
    end

    def show_map
	@map.show_map
    end
    def summary
	count = @map.get_count;
	puts ""
	puts "; disassembled #{count} bytes of #{@size}"
    end
end

d = Dumper.new
#d.show_map
#exit

d.pass1 0x40000400
puts "End of Pass 1"
#d.show_map
d.pass2
d.summary

#puts "DONE"

# THE END

